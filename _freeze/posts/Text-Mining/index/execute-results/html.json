{
  "hash": "d14cc64c8fed2a5c6a3906ba124f5281",
  "result": {
    "markdown": "---\ntitle: \"Text Mining\"\nauthor: \"Sabrina Michl\"\ndate: \"2023-01-27\"\ncategories: [code, analysis]\nbibliography: ref.bib\nimage: \"image.jpg\"\n---\n\n\n# 1. Preliminary Note\n\nFor this analysis we use the dataset from @data/0B5VML_2019 out of the zip archive @data/0B5VML/XIUWJ7_2019. The data are licensed according to Attribution 4.0 International (CC-BY-4.0). The used wordembeddings are from @grave2018learning. The data are licensed according to Attribution-ShareAlike 3.0 Unported (CC-BY-SA 3.0). The picture, that is used is from @bildquelle.\n\n# 2. Load The Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(rio)\nlibrary(tidymodels)\nlibrary(tidytext)\nlibrary(textrecipes)\nlibrary(lsa)\nlibrary(discrim)\nlibrary(naivebayes)\nlibrary(tictoc)\nlibrary(fastrtext)\nlibrary(remoji)\nlibrary(tokenizers)\n```\n:::\n\n\n# 3. Load Dataset And Minor Changes\n\n## 3.1 Train Dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_train <- read_tsv(\"C:/Users/sapi-/OneDrive/Studium/5. Semester/Data Science II/Data_Science_Blog/daten/germeval2018.training.txt\", col_names = FALSE)\n```\n:::\n\n\n### Rename Columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(d_train) <- c(\"text\", \"c1\", \"c2\")\n```\n:::\n\n\n### Add ID Column\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_train <- d_train %>%\nmutate(id = row_number()) %>%\nselect(id, everything())\n```\n:::\n\n\n## 3.2 Test Dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_test <- read_tsv(\"C:/Users/sapi-/OneDrive/Studium/5. Semester/Data Science II/Data_Science_Blog/daten/germeval2018.test.txt\", col_names = FALSE)\n```\n:::\n\n\n### Rename Columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(d_test) <- c(\"text\", \"c1\", \"c2\")\n```\n:::\n\n\n### Add ID Column\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd_test <- d_test %>%\nmutate(id = row_number()) %>%\nselect(id, everything())\n```\n:::\n\n\n# 4. Explore Dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_toc <- d_train %>%\nunnest_tokens(output = token, input = text)\ntrain_toc\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 100,217 x 4\n      id c1    c2    token         \n   <int> <chr> <chr> <chr>         \n 1     1 OTHER OTHER corinnamilborn\n 2     1 OTHER OTHER liebe         \n 3     1 OTHER OTHER corinna       \n 4     1 OTHER OTHER wir           \n 5     1 OTHER OTHER würden        \n 6     1 OTHER OTHER dich          \n 7     1 OTHER OTHER gerne         \n 8     1 OTHER OTHER als           \n 9     1 OTHER OTHER moderatorin   \n10     1 OTHER OTHER für           \n# ... with 100,207 more rows\n```\n:::\n:::\n\n\n> First we tokenize the dataset d_train. \\## Insert `Stopwords_de`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(stopwords_de, package = \"lsa\")\nstopwords_de <- tibble(word = stopwords_de)\nstopwords_de <- stopwords_de %>%\nrename(token = word)\n```\n:::\n\n\n> After that we use the stopwords_de to `anti_join` this with train_toc.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_toc2 <- train_toc %>%\nanti_join(stopwords_de)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining, by = \"token\"\n```\n:::\n:::\n\n\n## Show The Important Words\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_toc2 <- train_toc2 %>%\ncount(token, sort = TRUE)\n```\n:::\n\n\n### Plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_toc2 %>%\nslice_head(n=20) %>%\nggplot()+\naes(y=reorder(factor(token), n), x = n, color = token)+\ngeom_col(aes(fill = token, alpha = 2.5)) +\nggtitle(\"The most used words\") +\nylab(\"token\")+\nxlab(\"quantity\")+\ntheme_minimal()+\ntheme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n> We see that, to most used word is \"lbr\". We could inspect the dataset way deeper, e. g. do a manual sentimentanalyse or do lemmatization or stem the words. But we will have a look to these types in the different machine learning algorithmen now. \\# Preparation \\## Define Recipe - rec1 - TF-IDF\n\n# 5. Preparation\n\n## 5.1 Define Recipe - rec1 - TF-IDF\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec1 <-\nrecipe(c1 ~ ., data = select(d_train, text, c1, id)) %>%\nupdate_role(id, new_role = \"id\") %>%\nstep_tokenize(text) %>%\nstep_stopwords(text, language = \"de\", stopword_source = \"snowball\") %>%\nstep_stem(text) %>%\nstep_tfidf(text) %>%\nstep_normalize(all_numeric_predictors())\nrec1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRecipe\n\nInputs:\n\n      role #variables\n        id          1\n   outcome          1\n predictor          1\n\nOperations:\n\nTokenization for text\nStop word removal for text\nStemming for text\nTerm frequency-inverse document frequency with text\nCentering and scaling for all_numeric_predictors()\n```\n:::\n:::\n\n\n### Prep & Bake - rec1\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec1_prep <- rec1 %>%\nprep() %>%\nrecipes::bake(new_data = NULL)\n```\n:::\n\n\n## 5.2 Define Recipe - rec2 - word embedding\n\n### Insert The Predefined List\n\n\n::: {.cell}\n\n```{.r .cell-code}\nout_file_model <- \"C:/Users/sapi-/OneDrive - Hochschule für Angewandte Wissenschaften Ansbach/Desktop/AWM/angewandte Wirtschats- und Medienpsychologie/5. Semester/Word_Embedding/de.300.bin\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfile.exists(out_file_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfasttext_model <- load_model(out_file_model)\ndictionary <- get_dictionary(fasttext_model)\nget_word_vectors(fasttext_model, c(\"menschen\")) %>% `[`(1:10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] -0.043737594 -0.033647023 -0.016398411  0.037433818  0.029863771\n [6] -0.008217440  0.002691153 -0.027484305 -0.058012061  0.004103063\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(head(dictionary, 10))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \",\"    \".\"    \"</s>\" \"und\"  \"der\"  \":\"    \"die\"  \"\\\"\"   \")\"    \"(\"   \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nword_embedding_text <- tibble(word = dictionary)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(mc.cores = parallel::detectCores())\nwords_vecs <- get_word_vectors(fasttext_model)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nword_embedding_text <-\nword_embedding_text %>%\nbind_cols(words_vecs)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(word_embedding_text) <- c(\"word\", paste0(\"v\", sprintf(\"%03d\", 1:301)))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The `value` argument of `names<-` must have the same length as `x` as of tibble\n3.0.0.\ni `names` must have length 301, not 302.\n```\n:::\n:::\n\n\n### Recipe Definition rec2\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntic()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrec2 <-\nrecipe(c1 ~ ., data = select(d_train, text, c1, id)) %>%\nupdate_role(id, new_role = \"id\") %>%\nstep_tokenize(text) %>%\nstep_stopwords(text, language = \"de\", stopword_source = \"snowball\") %>%\nstep_word_embeddings(text, embeddings = word_embedding_text)\nrec2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRecipe\n\nInputs:\n\n      role #variables\n        id          1\n   outcome          1\n predictor          1\n\nOperations:\n\nTokenization for text\nStop word removal for text\nWord embeddings aggregated from text\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrec2_prep <- rec2 %>%\nprep() %>%\nrecipes::bake(new_data = NULL)\n```\n:::\n\n\n## 5.3 Define Recipe - rec3 - Word Embeddings\n\n### Insert the Helperfunctions\n\nWe are using the package \\[pradadata\\] (https://github.com/sebastiansauer/pradadata) from @sebastian_sauer_2018_1996614. The data are licensed according to General Public License 3 (GLP-3).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"schimpwoerter\", package = \"pradadata\")\ndata(\"sentiws\", package = \"pradadata\")\ndata(\"wild_emojis\", package = \"pradadata\")\nsource(\"C:/Users/sapi-/OneDrive/Studium/5. Semester/Data Science II/Data_Science_Blog/helper/helper_funs.R\")\n```\n:::\n\n\n### rec3\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec3 <-\nrecipe(c1 ~., data = select(d_train, text, c1, id)) %>%\nupdate_role(id, new_role = \"id\") %>%\nstep_text_normalization(text) %>%\nstep_mutate(emo_count = map_int(text, ~count_lexicon(.x, sentiws$word))) %>%\nstep_mutate(schimpf_count = map_int(text, ~count_lexicon(.x, schimpfwoerter$word))) %>%\nstep_mutate(wild_emojis = map_int(text, ~count_lexicon(.x, wild_emojis$emoji))) %>%\nstep_mutate(text_copy = text) %>%\nstep_textfeature(text_copy) %>%\nstep_tokenize(text) %>%\nstep_stopwords(text, language = \"de\", stopword_source = \"snowball\") %>%\nstep_stem(text) %>%\nstep_word_embeddings(text, embeddings = word_embedding_text)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrec3_prep <- rec3 %>%\nprep() %>%\nrecipes::bake(new_data = NULL)\n```\n:::\n\n\n## 5.4 Define Recipe - rec4 - TF-IDF\n\n### rec4\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec4 <-\nrecipe(c1 ~., data = select(d_train, text, c1, id)) %>%\nupdate_role(id, new_role = \"id\") %>%\nstep_text_normalization(text) %>%\nstep_mutate(emo_count = map_int(text, ~count_lexicon(.x, sentiws$word))) %>%\nstep_mutate(schimpf_count = map_int(text, ~count_lexicon(.x, schimpfwoerter$word))) %>%\nstep_mutate(wild_emojis = map_int(text, ~count_lexicon(.x, wild_emojis$emoji))) %>%\nstep_mutate(text_copy = text) %>%\nstep_textfeature(text_copy) %>%\nstep_tokenize(text) %>%\nstep_stopwords(text, language = \"de\", stopword_source = \"snowball\") %>%\nstep_stem(text) %>%\nstep_tfidf(text)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrec4_prep <- rec4 %>%\nprep() %>%\nrecipes::bake(new_data = NULL)\n```\n:::\n\n\n# 6. Build Resamples\n\nI have decided to go with the V-Fold-Cross-Validation, because of the time. We have a large amount of data with extremely extensive recipes, so the run-time would be enormous, if we would try another option of resampling, e. g. bootstrapping.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfolds <- vfold_cv(data = d_train,\nv = 2,\nrepeats = 1,\nstrata = c1)\n```\n:::\n\n\n# 7. Build the Penalty-Grid\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlambda_grid <- grid_regular(penalty(), levels = 30)\n```\n:::\n\n\n# 8. Build the Models\n\n## 8.1 Null Model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod0 <- null_model() %>%\nset_engine(\"parsnip\") %>%\nset_mode(\"classification\")\n```\n:::\n\n\n### Define The Workflow\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwf0 <- workflow() %>%\nadd_recipe(rec1) %>%\nadd_model(mod0)\n```\n:::\n\n\n### Resampling & Model Quality\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(mc.cores = parallel::detectCores())\ntic()\nfit0 <- fit_resamples(\nwf0,\nfolds,\ncontrol =control_resamples(save_pred = TRUE)\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Paket 'stopwords' wurde unter R Version 4.1.3 erstellt\n```\n:::\n\n```{.r .cell-code}\ntoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n95.39 sec elapsed\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nperformance0 <- collect_metrics(fit0)\nperformance0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 x 6\n  .metric  .estimator  mean     n   std_err .config             \n  <chr>    <chr>      <dbl> <int>     <dbl> <chr>               \n1 accuracy binary     0.663     2 0.0000673 Preprocessor1_Model1\n2 roc_auc  binary     0.5       2 0         Preprocessor1_Model1\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npreds0 <- collect_predictions(fit0)\npreds0 %>%\ngroup_by(id) %>%\nroc_curve(truth = c1, .pred_OFFENSE) %>%\nautoplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nconf_mat_resampled(fit0, tidy = FALSE) %>%\nautoplot(type = \"heatmap\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\n## 8.2 Lasso-L1 With TF-IDF\n\n### L1-Model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl1_8.2_mod <- logistic_reg(penalty = tune(), mixture = 1) %>%\nset_engine(\"glmnet\") %>%\nset_mode(\"classification\")\nl1_8.2_mod\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLogistic Regression Model Specification (classification)\n\nMain Arguments:\n  penalty = tune()\n  mixture = 1\n\nComputational engine: glmnet \n```\n:::\n:::\n\n\n### Define The Workflow\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl1_8.2_wf <-workflow() %>%\nadd_recipe(rec1) %>%\nadd_model(l1_8.2_mod)\nl1_8.2_wf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n== Workflow ====================================================================\nPreprocessor: Recipe\nModel: logistic_reg()\n\n-- Preprocessor ----------------------------------------------------------------\n5 Recipe Steps\n\n* step_tokenize()\n* step_stopwords()\n* step_stem()\n* step_tfidf()\n* step_normalize()\n\n-- Model -----------------------------------------------------------------------\nLogistic Regression Model Specification (classification)\n\nMain Arguments:\n  penalty = tune()\n  mixture = 1\n\nComputational engine: glmnet \n```\n:::\n:::\n\n\n### Resampling & Model Quality\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(mc.cores = parallel::detectCores())\nl1_8.2_wf_fit <- tune_grid(\nl1_8.2_wf,\nfolds,\ngrid = lambda_grid,\ncontrol = control_resamples(save_pred = TRUE)\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Paket 'glmnet' wurde unter R Version 4.1.3 erstellt\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Paket 'Matrix' wurde unter R Version 4.1.3 erstellt\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nl1_8.2_wf_fit_performance <- collect_metrics(l1_8.2_wf_fit)\nl1_8.2_wf_fit_performance\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 60 x 7\n    penalty .metric  .estimator  mean     n  std_err .config              \n      <dbl> <chr>    <chr>      <dbl> <int>    <dbl> <chr>                \n 1 1   e-10 accuracy binary     0.720     2 0.00733  Preprocessor1_Model01\n 2 1   e-10 roc_auc  binary     0.729     2 0.000785 Preprocessor1_Model01\n 3 2.21e-10 accuracy binary     0.720     2 0.00733  Preprocessor1_Model02\n 4 2.21e-10 roc_auc  binary     0.729     2 0.000785 Preprocessor1_Model02\n 5 4.89e-10 accuracy binary     0.720     2 0.00733  Preprocessor1_Model03\n 6 4.89e-10 roc_auc  binary     0.729     2 0.000785 Preprocessor1_Model03\n 7 1.08e- 9 accuracy binary     0.720     2 0.00733  Preprocessor1_Model04\n 8 1.08e- 9 roc_auc  binary     0.729     2 0.000785 Preprocessor1_Model04\n 9 2.40e- 9 accuracy binary     0.720     2 0.00733  Preprocessor1_Model05\n10 2.40e- 9 roc_auc  binary     0.729     2 0.000785 Preprocessor1_Model05\n# ... with 50 more rows\n```\n:::\n:::\n\n\n### Show The Best\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect_best(l1_8.2_wf_fit)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: No value of `metric` was given; metric 'roc_auc' will be used.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 2\n  penalty .config              \n    <dbl> <chr>                \n1 0.00853 Preprocessor1_Model24\n```\n:::\n:::\n\n\n### Select The Best\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchosen_auc_l1_8.2_wf_fit <-\nl1_8.2_wf_fit %>%\nselect_by_one_std_err(metric = \"roc_auc\", -penalty)\nchosen_auc_l1_8.2_wf_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 9\n  penalty .metric .estimator  mean     n std_err .config            .best .bound\n    <dbl> <chr>   <chr>      <dbl> <int>   <dbl> <chr>              <dbl>  <dbl>\n1 0.00853 roc_auc binary     0.737     2 0.00289 Preprocessor1_Mod~ 0.737  0.734\n```\n:::\n:::\n\n\n## 8.3 Ridge-Regression-L2 With TF-IDF\n\n### L2-Model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl2_8.3_mod <- logistic_reg(penalty = tune(), mixture = 0) %>%\nset_engine(\"glmnet\") %>%\nset_mode(\"classification\")\nl2_8.3_mod\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLogistic Regression Model Specification (classification)\n\nMain Arguments:\n  penalty = tune()\n  mixture = 0\n\nComputational engine: glmnet \n```\n:::\n:::\n\n\n### Define The Workflow\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl2_8.3_wf <-workflow() %>%\nadd_recipe(rec1) %>%\nadd_model(l2_8.3_mod)\nl2_8.3_wf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n== Workflow ====================================================================\nPreprocessor: Recipe\nModel: logistic_reg()\n\n-- Preprocessor ----------------------------------------------------------------\n5 Recipe Steps\n\n* step_tokenize()\n* step_stopwords()\n* step_stem()\n* step_tfidf()\n* step_normalize()\n\n-- Model -----------------------------------------------------------------------\nLogistic Regression Model Specification (classification)\n\nMain Arguments:\n  penalty = tune()\n  mixture = 0\n\nComputational engine: glmnet \n```\n:::\n:::\n\n\n### Resampling & Model Quality\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(mc.cores = parallel::detectCores())\nl2_8.3_wf_fit <- tune_grid(\nl2_8.3_wf,\nfolds,\ngrid = lambda_grid,\ncontrol = control_resamples(save_pred = TRUE)\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncollect_metrics(l2_8.3_wf_fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 60 x 7\n    penalty .metric  .estimator  mean     n  std_err .config              \n      <dbl> <chr>    <chr>      <dbl> <int>    <dbl> <chr>                \n 1 1   e-10 accuracy binary     0.709     2 0.00365  Preprocessor1_Model01\n 2 1   e-10 roc_auc  binary     0.746     2 0.000942 Preprocessor1_Model01\n 3 2.21e-10 accuracy binary     0.709     2 0.00365  Preprocessor1_Model02\n 4 2.21e-10 roc_auc  binary     0.746     2 0.000942 Preprocessor1_Model02\n 5 4.89e-10 accuracy binary     0.709     2 0.00365  Preprocessor1_Model03\n 6 4.89e-10 roc_auc  binary     0.746     2 0.000942 Preprocessor1_Model03\n 7 1.08e- 9 accuracy binary     0.709     2 0.00365  Preprocessor1_Model04\n 8 1.08e- 9 roc_auc  binary     0.746     2 0.000942 Preprocessor1_Model04\n 9 2.40e- 9 accuracy binary     0.709     2 0.00365  Preprocessor1_Model05\n10 2.40e- 9 roc_auc  binary     0.746     2 0.000942 Preprocessor1_Model05\n# ... with 50 more rows\n```\n:::\n:::\n\n\n### Select The Best\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchosen_auc_l2_8.3_wf_fit <-\nl2_8.3_wf_fit %>%\nselect_by_one_std_err(metric = \"roc_auc\", -penalty)\nchosen_auc_l2_8.3_wf_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 9\n  penalty .metric .estimator  mean     n std_err .config            .best .bound\n    <dbl> <chr>   <chr>      <dbl> <int>   <dbl> <chr>              <dbl>  <dbl>\n1       1 roc_auc binary     0.747     2 0.00112 Preprocessor1_Mod~ 0.747  0.746\n```\n:::\n:::\n\n\n## 8.4 Lasso-L1 With Word Embeddings\n\n### L1-Model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl1_8.4_mod <- logistic_reg(penalty = tune(), mixture = 1) %>%\nset_engine(\"glmnet\") %>%\nset_mode(\"classification\")\nl1_8.4_mod\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLogistic Regression Model Specification (classification)\n\nMain Arguments:\n  penalty = tune()\n  mixture = 1\n\nComputational engine: glmnet \n```\n:::\n:::\n\n\n### Define the Workflow\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl1_8.4_wf <- workflow() %>%\nadd_recipe(rec2) %>%\nadd_model(l1_8.4_mod)\nl1_8.4_wf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n== Workflow ====================================================================\nPreprocessor: Recipe\nModel: logistic_reg()\n\n-- Preprocessor ----------------------------------------------------------------\n3 Recipe Steps\n\n* step_tokenize()\n* step_stopwords()\n* step_word_embeddings()\n\n-- Model -----------------------------------------------------------------------\nLogistic Regression Model Specification (classification)\n\nMain Arguments:\n  penalty = tune()\n  mixture = 1\n\nComputational engine: glmnet \n```\n:::\n:::\n\n\n### Resampling & Model Quality\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(mc.cores = parallel::detectCores())\nl1_8.4_wf_fit <- tune_grid(\nl1_8.4_wf,\nfolds,\ngrid = lambda_grid,\ncontrol = control_resamples(save_pred = TRUE)\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncollect_metrics(l1_8.4_wf_fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 60 x 7\n    penalty .metric  .estimator  mean     n std_err .config              \n      <dbl> <chr>    <chr>      <dbl> <int>   <dbl> <chr>                \n 1 1   e-10 accuracy binary     0.699     2 0.00493 Preprocessor1_Model01\n 2 1   e-10 roc_auc  binary     0.697     2 0.00187 Preprocessor1_Model01\n 3 2.21e-10 accuracy binary     0.699     2 0.00493 Preprocessor1_Model02\n 4 2.21e-10 roc_auc  binary     0.697     2 0.00187 Preprocessor1_Model02\n 5 4.89e-10 accuracy binary     0.699     2 0.00493 Preprocessor1_Model03\n 6 4.89e-10 roc_auc  binary     0.697     2 0.00187 Preprocessor1_Model03\n 7 1.08e- 9 accuracy binary     0.699     2 0.00493 Preprocessor1_Model04\n 8 1.08e- 9 roc_auc  binary     0.697     2 0.00187 Preprocessor1_Model04\n 9 2.40e- 9 accuracy binary     0.699     2 0.00493 Preprocessor1_Model05\n10 2.40e- 9 roc_auc  binary     0.697     2 0.00187 Preprocessor1_Model05\n# ... with 50 more rows\n```\n:::\n:::\n\n\n### Select The Best\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchosen_auc_l1_8.4_wf_fit <-\nl1_8.4_wf_fit %>%\nselect_by_one_std_err(metric = \"roc_auc\", -penalty)\nchosen_auc_l1_8.4_wf_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 9\n  penalty .metric .estimator  mean     n std_err .config            .best .bound\n    <dbl> <chr>   <chr>      <dbl> <int>   <dbl> <chr>              <dbl>  <dbl>\n1 0.00386 roc_auc binary     0.706     2 0.00232 Preprocessor1_Mod~ 0.706  0.704\n```\n:::\n:::\n\n\n## 8.5 Ridge-Regression-L2 With Word Embeddings\n\n### L2-Model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl2_8.5_mod <- logistic_reg(penalty = tune(), mixture = 0) %>%\nset_engine(\"glmnet\") %>%\nset_mode(\"classification\")\nl2_8.5_mod\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLogistic Regression Model Specification (classification)\n\nMain Arguments:\n  penalty = tune()\n  mixture = 0\n\nComputational engine: glmnet \n```\n:::\n:::\n\n\n### Define the Workflow\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl2_8.5_wf <- workflow() %>%\nadd_recipe(rec2) %>%\nadd_model(l2_8.5_mod)\nl2_8.5_wf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n== Workflow ====================================================================\nPreprocessor: Recipe\nModel: logistic_reg()\n\n-- Preprocessor ----------------------------------------------------------------\n3 Recipe Steps\n\n* step_tokenize()\n* step_stopwords()\n* step_word_embeddings()\n\n-- Model -----------------------------------------------------------------------\nLogistic Regression Model Specification (classification)\n\nMain Arguments:\n  penalty = tune()\n  mixture = 0\n\nComputational engine: glmnet \n```\n:::\n:::\n\n\n### Resampling & Model Quality\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(mc.cores = parallel::detectCores())\nl2_8.5_wf_fit <- tune_grid(\nl2_8.5_wf,\nfolds,\ngrid = lambda_grid,\ncontrol = control_resamples(save_pred = TRUE)\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncollect_metrics(l2_8.5_wf_fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 60 x 7\n    penalty .metric  .estimator  mean     n std_err .config              \n      <dbl> <chr>    <chr>      <dbl> <int>   <dbl> <chr>                \n 1 1   e-10 accuracy binary     0.702     2 0.00753 Preprocessor1_Model01\n 2 1   e-10 roc_auc  binary     0.703     2 0.00244 Preprocessor1_Model01\n 3 2.21e-10 accuracy binary     0.702     2 0.00753 Preprocessor1_Model02\n 4 2.21e-10 roc_auc  binary     0.703     2 0.00244 Preprocessor1_Model02\n 5 4.89e-10 accuracy binary     0.702     2 0.00753 Preprocessor1_Model03\n 6 4.89e-10 roc_auc  binary     0.703     2 0.00244 Preprocessor1_Model03\n 7 1.08e- 9 accuracy binary     0.702     2 0.00753 Preprocessor1_Model04\n 8 1.08e- 9 roc_auc  binary     0.703     2 0.00244 Preprocessor1_Model04\n 9 2.40e- 9 accuracy binary     0.702     2 0.00753 Preprocessor1_Model05\n10 2.40e- 9 roc_auc  binary     0.703     2 0.00244 Preprocessor1_Model05\n# ... with 50 more rows\n```\n:::\n:::\n\n\n### Select The Best\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchosen_auc_l2_8.5_wf_fit <-\nl2_8.5_wf_fit %>%\nselect_by_one_std_err(metric = \"roc_auc\", -penalty)\nchosen_auc_l2_8.5_wf_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 9\n  penalty .metric .estimator  mean     n  std_err .config           .best .bound\n    <dbl> <chr>   <chr>      <dbl> <int>    <dbl> <chr>             <dbl>  <dbl>\n1   0.204 roc_auc binary     0.717     2 0.000538 Preprocessor1_Mo~ 0.717  0.717\n```\n:::\n:::\n\n\n## 8.6 Lasso-L1 With Word Embeddings\n\n### L1-Model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl1_8.6_mod <- logistic_reg(penalty = tune(), mixture = 1) %>%\nset_engine(\"glmnet\") %>%\nset_mode(\"classification\")\nl1_8.6_mod\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLogistic Regression Model Specification (classification)\n\nMain Arguments:\n  penalty = tune()\n  mixture = 1\n\nComputational engine: glmnet \n```\n:::\n:::\n\n\n### Define The Workflow\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl1_8.6_wf <- workflow() %>%\nadd_recipe(rec3) %>%\nadd_model(l1_8.6_mod)\nl1_8.6_wf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n== Workflow ====================================================================\nPreprocessor: Recipe\nModel: logistic_reg()\n\n-- Preprocessor ----------------------------------------------------------------\n10 Recipe Steps\n\n* step_text_normalization()\n* step_mutate()\n* step_mutate()\n* step_mutate()\n* step_mutate()\n* step_textfeature()\n* step_tokenize()\n* step_stopwords()\n* step_stem()\n* step_word_embeddings()\n\n-- Model -----------------------------------------------------------------------\nLogistic Regression Model Specification (classification)\n\nMain Arguments:\n  penalty = tune()\n  mixture = 1\n\nComputational engine: glmnet \n```\n:::\n:::\n\n\n### Resampling & Model Quality\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(mc.cores = parallel::detectCores())\nl1_8.6_wf_fit <- tune_grid(\nl1_8.6_wf,\nfolds,\ngrid = lambda_grid,\ncontrol = control_resamples(save_pred = TRUE)\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Paket 'stringi' wurde unter R Version 4.1.2 erstellt\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Paket 'textfeatures' wurde unter R Version 4.1.3 erstellt\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncollect_metrics(l1_8.6_wf_fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 60 x 7\n    penalty .metric  .estimator  mean     n   std_err .config              \n      <dbl> <chr>    <chr>      <dbl> <int>     <dbl> <chr>                \n 1 1   e-10 accuracy binary     0.718     2 0.000855  Preprocessor1_Model01\n 2 1   e-10 roc_auc  binary     0.728     2 0.0000880 Preprocessor1_Model01\n 3 2.21e-10 accuracy binary     0.718     2 0.000855  Preprocessor1_Model02\n 4 2.21e-10 roc_auc  binary     0.728     2 0.0000880 Preprocessor1_Model02\n 5 4.89e-10 accuracy binary     0.718     2 0.000855  Preprocessor1_Model03\n 6 4.89e-10 roc_auc  binary     0.728     2 0.0000880 Preprocessor1_Model03\n 7 1.08e- 9 accuracy binary     0.718     2 0.000855  Preprocessor1_Model04\n 8 1.08e- 9 roc_auc  binary     0.728     2 0.0000880 Preprocessor1_Model04\n 9 2.40e- 9 accuracy binary     0.718     2 0.000855  Preprocessor1_Model05\n10 2.40e- 9 roc_auc  binary     0.728     2 0.0000880 Preprocessor1_Model05\n# ... with 50 more rows\n```\n:::\n:::\n\n\n### Select The Best\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchosen_auc_l1_8.6_wf_fit <-\nl1_8.6_wf_fit %>%\nselect_by_one_std_err(metric = \"roc_auc\", -penalty)\nchosen_auc_l1_8.6_wf_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 9\n  penalty .metric .estimator  mean     n std_err .config            .best .bound\n    <dbl> <chr>   <chr>      <dbl> <int>   <dbl> <chr>              <dbl>  <dbl>\n1 0.00853 roc_auc binary     0.743     2 0.00519 Preprocessor1_Mod~ 0.746  0.743\n```\n:::\n:::\n\n\n## 8.7 Ridge-Regression-L2 with TF-IDF\n\n### L2-Model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl2_8.7_mod <- logistic_reg(penalty = tune(), mixture = 0) %>%\nset_engine(\"glmnet\") %>%\nset_mode(\"classification\")\nl2_8.7_mod\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLogistic Regression Model Specification (classification)\n\nMain Arguments:\n  penalty = tune()\n  mixture = 0\n\nComputational engine: glmnet \n```\n:::\n:::\n\n\n### Define The Workflow\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl2_8.7_wf <-workflow() %>%\nadd_recipe(rec3) %>%\nadd_model(l2_8.7_mod)\nl2_8.7_wf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n== Workflow ====================================================================\nPreprocessor: Recipe\nModel: logistic_reg()\n\n-- Preprocessor ----------------------------------------------------------------\n10 Recipe Steps\n\n* step_text_normalization()\n* step_mutate()\n* step_mutate()\n* step_mutate()\n* step_mutate()\n* step_textfeature()\n* step_tokenize()\n* step_stopwords()\n* step_stem()\n* step_word_embeddings()\n\n-- Model -----------------------------------------------------------------------\nLogistic Regression Model Specification (classification)\n\nMain Arguments:\n  penalty = tune()\n  mixture = 0\n\nComputational engine: glmnet \n```\n:::\n:::\n\n\n### Resampling & Model Quality\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(mc.cores = parallel::detectCores())\nl2_8.7_wf_fit <- tune_grid(\nl2_8.7_wf,\nfolds,\ngrid = lambda_grid,\ncontrol = control_resamples(save_pred = TRUE)\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nl2_8.7_wf_performance <- collect_metrics(l2_8.7_wf_fit)\nl2_8.7_wf_performance\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 60 x 7\n    penalty .metric  .estimator  mean     n  std_err .config              \n      <dbl> <chr>    <chr>      <dbl> <int>    <dbl> <chr>                \n 1 1   e-10 accuracy binary     0.724     2 0.000454 Preprocessor1_Model01\n 2 1   e-10 roc_auc  binary     0.739     2 0.000694 Preprocessor1_Model01\n 3 2.21e-10 accuracy binary     0.724     2 0.000454 Preprocessor1_Model02\n 4 2.21e-10 roc_auc  binary     0.739     2 0.000694 Preprocessor1_Model02\n 5 4.89e-10 accuracy binary     0.724     2 0.000454 Preprocessor1_Model03\n 6 4.89e-10 roc_auc  binary     0.739     2 0.000694 Preprocessor1_Model03\n 7 1.08e- 9 accuracy binary     0.724     2 0.000454 Preprocessor1_Model04\n 8 1.08e- 9 roc_auc  binary     0.739     2 0.000694 Preprocessor1_Model04\n 9 2.40e- 9 accuracy binary     0.724     2 0.000454 Preprocessor1_Model05\n10 2.40e- 9 roc_auc  binary     0.739     2 0.000694 Preprocessor1_Model05\n# ... with 50 more rows\n```\n:::\n:::\n\n\n### Show The Best\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect_best(l2_8.7_wf_fit)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: No value of `metric` was given; metric 'roc_auc' will be used.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 2\n  penalty .config              \n    <dbl> <chr>                \n1   0.204 Preprocessor1_Model28\n```\n:::\n:::\n\n\n### Select The Best\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchosen_auc_l2_8.7_wf_fit <-\nl2_8.7_wf_fit %>%\nselect_by_one_std_err(metric = \"roc_auc\", -penalty)\nchosen_auc_l2_8.7_wf_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 9\n  penalty .metric .estimator  mean     n std_err .config            .best .bound\n    <dbl> <chr>   <chr>      <dbl> <int>   <dbl> <chr>              <dbl>  <dbl>\n1   0.452 roc_auc binary     0.748     2 0.00419 Preprocessor1_Mod~ 0.751  0.747\n```\n:::\n:::\n\n\n## 8.8 Lasso-L1 With TF-IDF\n\n### L1-Model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl1_8.8_mod <- logistic_reg(penalty = tune(), mixture = 1) %>%\nset_engine(\"glmnet\") %>%\nset_mode(\"classification\")\nl1_8.8_mod\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLogistic Regression Model Specification (classification)\n\nMain Arguments:\n  penalty = tune()\n  mixture = 1\n\nComputational engine: glmnet \n```\n:::\n:::\n\n\n### Define The Workflow\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl1_8.8_wf <-workflow() %>%\nadd_recipe(rec4) %>%\nadd_model(l1_8.8_mod)\nl1_8.8_wf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n== Workflow ====================================================================\nPreprocessor: Recipe\nModel: logistic_reg()\n\n-- Preprocessor ----------------------------------------------------------------\n10 Recipe Steps\n\n* step_text_normalization()\n* step_mutate()\n* step_mutate()\n* step_mutate()\n* step_mutate()\n* step_textfeature()\n* step_tokenize()\n* step_stopwords()\n* step_stem()\n* step_tfidf()\n\n-- Model -----------------------------------------------------------------------\nLogistic Regression Model Specification (classification)\n\nMain Arguments:\n  penalty = tune()\n  mixture = 1\n\nComputational engine: glmnet \n```\n:::\n:::\n\n\n### Resampling & Model Quality\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(mc.cores = parallel::detectCores())\nl1_8.8_wf_fit <- tune_grid(\nl1_8.8_wf,\nfolds,\ngrid = lambda_grid,\ncontrol = control_resamples(save_pred = TRUE)\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nl1_8.8_wf_performance <- collect_metrics(l1_8.8_wf_fit)\nl1_8.8_wf_performance\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 60 x 7\n    penalty .metric  .estimator  mean     n std_err .config              \n      <dbl> <chr>    <chr>      <dbl> <int>   <dbl> <chr>                \n 1 1   e-10 accuracy binary     0.733     2 0.00145 Preprocessor1_Model01\n 2 1   e-10 roc_auc  binary     0.754     2 0.00214 Preprocessor1_Model01\n 3 2.21e-10 accuracy binary     0.733     2 0.00145 Preprocessor1_Model02\n 4 2.21e-10 roc_auc  binary     0.754     2 0.00214 Preprocessor1_Model02\n 5 4.89e-10 accuracy binary     0.733     2 0.00145 Preprocessor1_Model03\n 6 4.89e-10 roc_auc  binary     0.754     2 0.00214 Preprocessor1_Model03\n 7 1.08e- 9 accuracy binary     0.733     2 0.00145 Preprocessor1_Model04\n 8 1.08e- 9 roc_auc  binary     0.754     2 0.00214 Preprocessor1_Model04\n 9 2.40e- 9 accuracy binary     0.733     2 0.00145 Preprocessor1_Model05\n10 2.40e- 9 roc_auc  binary     0.754     2 0.00214 Preprocessor1_Model05\n# ... with 50 more rows\n```\n:::\n:::\n\n\n### Show The Best\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect_best(l1_8.8_wf_fit)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: No value of `metric` was given; metric 'roc_auc' will be used.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 2\n  penalty .config              \n    <dbl> <chr>                \n1 0.00853 Preprocessor1_Model24\n```\n:::\n:::\n\n\n### Select The Best\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchosen_auc_l1_8.8_wf_fit <-\nl1_8.8_wf_fit %>%\nselect_by_one_std_err(metric = \"roc_auc\", -penalty)\nchosen_auc_l1_8.8_wf_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 9\n  penalty .metric .estimator  mean     n std_err .config            .best .bound\n    <dbl> <chr>   <chr>      <dbl> <int>   <dbl> <chr>              <dbl>  <dbl>\n1 0.00853 roc_auc binary     0.767     2 0.00335 Preprocessor1_Mod~ 0.767  0.763\n```\n:::\n:::\n\n\n## 8.9 Ridge-Regression-L2 With TF-IDF\n\n### L2-Model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl2_8.9_mod <- logistic_reg(penalty = tune(), mixture = 0) %>%\nset_engine(\"glmnet\") %>%\nset_mode(\"classification\")\nl2_8.9_mod\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLogistic Regression Model Specification (classification)\n\nMain Arguments:\n  penalty = tune()\n  mixture = 0\n\nComputational engine: glmnet \n```\n:::\n:::\n\n\n### Define The Workflow\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl2_8.9_wf <-workflow() %>%\nadd_recipe(rec4) %>%\nadd_model(l2_8.9_mod)\nl2_8.9_wf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n== Workflow ====================================================================\nPreprocessor: Recipe\nModel: logistic_reg()\n\n-- Preprocessor ----------------------------------------------------------------\n10 Recipe Steps\n\n* step_text_normalization()\n* step_mutate()\n* step_mutate()\n* step_mutate()\n* step_mutate()\n* step_textfeature()\n* step_tokenize()\n* step_stopwords()\n* step_stem()\n* step_tfidf()\n\n-- Model -----------------------------------------------------------------------\nLogistic Regression Model Specification (classification)\n\nMain Arguments:\n  penalty = tune()\n  mixture = 0\n\nComputational engine: glmnet \n```\n:::\n:::\n\n\n### Resampling & Model Quality\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(mc.cores = parallel::detectCores())\nl2_8.9_wf_fit <- tune_grid(\nl2_8.9_wf,\nfolds,\ngrid = lambda_grid,\ncontrol = control_resamples(save_pred = TRUE)\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nl2_8.9_wf_performance <- collect_metrics(l2_8.9_wf_fit)\nl2_8.9_wf_performance\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 60 x 7\n    penalty .metric  .estimator  mean     n  std_err .config              \n      <dbl> <chr>    <chr>      <dbl> <int>    <dbl> <chr>                \n 1 1   e-10 accuracy binary     0.708     2 0.00725  Preprocessor1_Model01\n 2 1   e-10 roc_auc  binary     0.760     2 0.000873 Preprocessor1_Model01\n 3 2.21e-10 accuracy binary     0.708     2 0.00725  Preprocessor1_Model02\n 4 2.21e-10 roc_auc  binary     0.760     2 0.000873 Preprocessor1_Model02\n 5 4.89e-10 accuracy binary     0.708     2 0.00725  Preprocessor1_Model03\n 6 4.89e-10 roc_auc  binary     0.760     2 0.000873 Preprocessor1_Model03\n 7 1.08e- 9 accuracy binary     0.708     2 0.00725  Preprocessor1_Model04\n 8 1.08e- 9 roc_auc  binary     0.760     2 0.000873 Preprocessor1_Model04\n 9 2.40e- 9 accuracy binary     0.708     2 0.00725  Preprocessor1_Model05\n10 2.40e- 9 roc_auc  binary     0.760     2 0.000873 Preprocessor1_Model05\n# ... with 50 more rows\n```\n:::\n:::\n\n\n### Select The Best\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchosen_auc_l2_8.9_wf_fit <-\nl2_8.9_wf_fit %>%\nselect_by_one_std_err(metric = \"roc_auc\", -penalty)\nchosen_auc_l2_8.9_wf_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 x 9\n  penalty .metric .estimator  mean     n  std_err .config           .best .bound\n    <dbl> <chr>   <chr>      <dbl> <int>    <dbl> <chr>             <dbl>  <dbl>\n1       1 roc_auc binary     0.760     2 0.000873 Preprocessor1_Mo~ 0.760  0.759\n```\n:::\n:::\n\n\n\n\n\n# 9. Predictions\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}